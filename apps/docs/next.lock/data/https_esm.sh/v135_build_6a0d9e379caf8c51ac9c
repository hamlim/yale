const d=10485760;async function i(t,r){const e=t.slice(1);if(r.source.length>10485760)throw new Error(`esm.sh [${e}] <400> source exceeded limit.`);const s=JSON.stringify(r);if(s.length>2*10485760)throw new Error(`esm.sh [${e}] <400> body exceeded limit.`);const o=await fetch(new URL(t,import.meta.url),{method:"POST",headers:{"Content-Type":"application/json"},body:s});if(!o.ok)throw new Error(`esm.sh [${e}] <${o.status}> ${o.statusText}`);const n=await o.json();if(n.error)throw new Error(`esm.sh [${e}] ${n.error.message}`);return n}function a(t){const r=typeof t=="string"?{source:t}:t;if(!r.source)throw new Error("esm.sh [build] <400> missing source");return i("/build",r)}function g(t){const r=typeof t=="string"?{source:t}:t;if(!r.source)throw new Error("esm.sh [transform] <400> missing source");return Reflect.set(r,"imports",JSON.stringify(r.imports||{})),i("/transform",r)}async function l(t,...r){const e=String.raw({raw:t},...r),s=await c(e);return{...await import(s.url),_build:s}}async function c(t){const r=await u(typeof t=="string"?t:JSON.stringify(t));if(globalThis.localStorage){const s=localStorage.getItem(r);if(s)return JSON.parse(s)}const e=await a(t);return globalThis.localStorage&&localStorage.setItem(r,JSON.stringify(e)),e}async function u(t){return[...new Uint8Array(await crypto.subtle.digest("SHA-1",new TextEncoder().encode(t)))].map(e=>e.toString(16).padStart(2,"0")).join("")}var m=a;export{a as build,m as default,l as esm,g as transform};
